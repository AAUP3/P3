@page "/begivenheder/opretbegivenhed"


@using DataAccessLibrary
@using DataAccessLibrary.Models
@using P3_Project.Models
@using System
@using System.Data

@inject IUnionActivityData _db
@inject NavigationManager NavigationManager

<h3>Opret begivenhed</h3>


<div>
    <div style="background-color: #3846c0; border-radius: 10px; padding-left: 10px; padding-top: 5px;">
    <EditForm Model="@newUnionActivity" OnSubmit="@InsertUnionActivity">
            @if (FirstScreen)
            {
                <div class="InputField" style="max-width: 98.5%;">
                    <label for="name">Overskrift</label>
                    <InputText id="name" class="form-control" @bind-Value="newUnionActivity.Name"></InputText>
                </div>
                <div class="InputField" style="max-width: 98.5%;">
                    <label for="description">Beskrivelse</label>
                    <InputTextArea id="description" class="form-control textBoxSize" @bind-Value="newUnionActivity.Description"></InputTextArea>
                </div>
                <div class="InputField">
                    <label for="dateofactivity">Dato for afholdelse</label>
                    <InputDate id="dateofactivity" @bind-Value="newUnionActivity.DateOfActivity"></InputDate>
                </div>
                <div class="InputField">
                    <label for="isyearlyactivity">Årstur</label>
                    <InputCheckbox @bind-Value="newUnionActivity.IsYearlyActivity" id="isyearlyactivity"></InputCheckbox>
                </div>
                <div class="InputField">
                    <label for="allowregistration">Tilmelding tilladt</label>
                    <InputCheckbox @bind-Value="newUnionActivity.AllowRegistration" id="allowregistration"></InputCheckbox>
                </div>
                <div class="InputField">
                    <label for="allowgroupregistration">Gruppe-tilmelding tilladt</label>
                    <InputCheckbox @bind-Value="newUnionActivity.AllowGroupRegistration" id="allowgroupregistration"></InputCheckbox>
                </div>
                <button type="button" @onclick="NextScreen">Næste</button>
            }
        @if (!FirstScreen)
        {
            <p>Generel Information</p>
            @foreach (var infoField in infoFields)
            {

                <div>
                    <InputText class="form-control" @bind-Value="infoField.Name"></InputText>
                </div>

            }

            <div style="padding-top: 1%;">
                    <button type="button" @onclick="AddNewInformation" class="btn btn-light">Tilføj felt</button>
                    <button type="button" @onclick="RemoveInformation" class="btn btn-light">Fjern felt</button>
                </div>

            <p style="padding-top: 2%">Personlig Information</p>
            <div>
                <label for="requirename">Navn</label>
                <InputCheckbox @bind-Value="newUnionActivity.RequireName" id="requirename"></InputCheckbox>
            </div>
            <div>
                <label for="requireemail">E-mail</label>
                <InputCheckbox @bind-Value="newUnionActivity.RequireEmail" id="requireemail"></InputCheckbox>
            </div>
            <div>
                <label for="requirephone">Telefonnummer</label>
                <InputCheckbox @bind-Value="newUnionActivity.RequirePhonenumber" id="requirephone"></InputCheckbox>
            </div>


            @foreach (var pInfoField in pInfoFields)
            {


                <div>
                    <InputText class="form-control" @bind-Value="pInfoField.Name"></InputText>
                </div>

            }
               



                <div style="padding-top: 1%;">
                    <button type="button" @onclick="AddNewPInformation" class="btn btn-light">Tilføj felt</button>
                    <button type="button" @onclick="RemovePInformation" class="btn btn-light">Fjern felt</button>
                </div>

                <div style="padding-top: 2%; padding-bottom: 0.5%">
                    <button type="button" @onclick="PreviousScreen" class="btn btn-light">Forrige</button>
                    <button type="submit" class="btn btn-light">Færdiggør</button>
                </div>



            }

        </EditForm>
    </div> <!--blue box end-->
</div> <!--container end-->


@code {

    


 



    public List<InformationFieldModel> infoFields = new List<InformationFieldModel>();
    public List<InformationFieldModel> pInfoFields = new List<InformationFieldModel>();

    private DisplayUnionActivityModel newUnionActivity = new DisplayUnionActivityModel();

    private int NumberOfInformation = 0;
    private int NumberOfPInformation = 0;
    private int infoCount;
    private int pInfoCount;



    public bool FirstScreen = true;


    protected override void OnInitialized()
    {
        //unionActivities.Add(unionActivity);
        newUnionActivity.DateOfActivity = DateTime.Today;
    }


    


    

    void AddNewInformation()
    {
        // unionActivities.Add(new UnionActivityModel()); old???
        if (NumberOfInformation < 5)
        {
            NumberOfInformation++;
            infoFields.Add(new InformationFieldModel(""));

        }
    }

    void AddNewPInformation()
    {
        // unionActivities.Add(new UnionActivityModel()); old???
        if (NumberOfPInformation < 5)
        {
            NumberOfPInformation++;
            pInfoFields.Add(new InformationFieldModel(""));

        }
    }

    void RemovePInformation()
    {
        if (NumberOfPInformation > 0)
        {
            NumberOfPInformation--;
            pInfoCount = pInfoFields.Count;
            pInfoFields.RemoveAt(pInfoCount - 1);
        }

    }
    void RemoveInformation()
    {
        if (NumberOfInformation > 0)
        {
            NumberOfInformation--;
            infoCount = infoFields.Count;
            infoFields.RemoveAt(infoCount - 1);
        }
    }

    void Add(string information)
    {

    }

    private async Task InsertUnionActivity()
    {
        infoCount = infoFields.Count;
        pInfoCount = pInfoFields.Count;

        //make information lists into arrays with 5 strings
        string[] info = new string[] { "", "", "", "", "" };
        for (int i = 0; i < infoCount; i++)
        {
            info[i] = infoFields[i].Name;
        }
        string[] pInfo = new string[] { "", "", "", "", "" };
        for (int i = 0; i < pInfoCount; i++)
        {
            pInfo[i] = pInfoFields[i].Name;
        }
        //create union activity object that is sent to the database
        UnionActivityModel ua = new UnionActivityModel
            {
                Name = newUnionActivity.Name,
                Description = newUnionActivity.Description,
                DateOfActivity = newUnionActivity.DateOfActivity,
                //IsVisible = newUnionActivity.IsVisible
                IsVisible = false,
                RequireName = newUnionActivity.RequireName,
                RequireEmail = newUnionActivity.RequireEmail,
                RequirePhonenumber = newUnionActivity.RequirePhonenumber,
                Information1 = info[0],
                Information2 = info[1],
                Information3 = info[2],
                Information4 = info[3],
                Information5 = info[4],
                PInformation1 = pInfo[0],
                PInformation2 = pInfo[1],
                PInformation3 = pInfo[2],
                PInformation4 = pInfo[3],
                PInformation5 = pInfo[4],
                IsYearlyActivity = newUnionActivity.IsYearlyActivity,
                AllowRegistration = newUnionActivity.AllowRegistration,
                AllowGroupRegistration = newUnionActivity.AllowGroupRegistration
            };




        await _db.InsertUnionActivity(ua);

        //reset used models and containers
        newUnionActivity = new DisplayUnionActivityModel();
        infoFields = new List<InformationFieldModel>();
        pInfoFields = new List<InformationFieldModel>();
        //info = new string[] { "", "", "", "", ""};

        NavigationManager.NavigateTo("begivenheder");
    }

    


    void NextScreen()
    {
        FirstScreen = false;
    }

    void PreviousScreen()
    {
        FirstScreen = true;
    }

}
