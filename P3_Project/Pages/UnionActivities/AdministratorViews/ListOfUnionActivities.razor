@page "/begivenheder"

@using DataAccessLibrary
@using DataAccessLibrary.Models
@using P3_Project.Models

@inject IUnionActivityData _db
@inject IRegistrationData _rdb
@inject NavigationManager NavigationManager

<h3>Rediger Begivenheder</h3>

@if (unionActivities == null)
{
    <p>Loading...</p>
}
else
{
    <div class="" style="background-color: #3846c0; border-radius: 10px; padding: 10px">
        <div style="background-color: white; border-radius 10px; margin: 20px;">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Overskrift</th>
                        <th>Dato</th>
                        <th>Varighed</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var unionActivity in unionActivities)
                    {
                        <tr>
                            <td>@unionActivity.Id</td>
                            <td>@unionActivity.Name</td>
                            <td>@unionActivity.DateOfActivity.ToShortDateString()</td>
                            <td>@unionActivity.ActivityDuration</td>
                            <td>
                                @if (unionActivity.IsVisible)
                                {
                                    <button class="btn btn-primary" @onclick="() => ChangeVisibility(unionActivity)">Skjul</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="() => ChangeVisibility(unionActivity)">Vis</button>
                                }
                            </td>
                            <td>
                                @if (unionActivity.Description.Length > 400)
                                {
                                    <button class="btn btn-primary c-tooltip-left" data-c-tooltip="@unionActivity.Description.Substring(0, 400)....">
                                        <i class="oi oi-info"></i>
                                    </button>
                                } 
                                else 
                                {
                                    <button class="btn btn-primary c-tooltip-left" data-c-tooltip="@unionActivity.Description">
                                        <i class="oi oi-info"></i>
                                    </button>
                                }
                                
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => UpdateUnionActivity(unionActivity.Id)">
                                    <i class="oi oi-pencil"></i>
                                </button>
                            </td>
                            @if (GetUnionActivityRegistrations(unionActivity.Id)) {
                                <td>
                                    <button class="btn btn-primary" @onclick="() => GoToListOfParticipants(unionActivity.Id)">Tilmeldinger</button>
                                </td>
                            }
                            else {
                                <td></td>
                            }
                            

                            <td>
                                <button class="btn btn-danger" @onclick="() => DeleteUnionActivity(unionActivity.Id, unionActivity)">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}







@code {

    private List<UnionActivityModel> unionActivities;
    private List<RegistrationModel> registrations;


    protected override async Task OnInitializedAsync()
    {

        //unionActivities = await _db.GetUnionActivities();
        unionActivities = await _db.OrderActivities("IsVisible DESC, DateOfActivity ASC");
        registrations = await _rdb.GetAllRegistrations();

    }



    void GoToMakeUnionActivity()
    {
        NavigationManager.NavigateTo("begivenheder/opretbegivenhed");
    }



    void ShowUnionActivity(int id)
    {
        NavigationManager.NavigateTo($"begivenheder/{id}");
    }



    void UpdateUnionActivity(int id)
    {
        NavigationManager.NavigateTo($"begivenheder/redigerbegivenhed/{id}");
    }



    async void DeleteUnionActivity(int id, UnionActivityModel unionActivityToDelete)
    {
        await _db.DeleteUnionActivity(id, unionActivityToDelete);
        await _rdb.DeleteAllRegistrationsOfUnionActivity(id);
        NavigationManager.NavigateTo($"begivenheder/", true);
    }



    async void ChangeVisibility(UnionActivityModel unionActivityToChangeVisibility)
    {
        if (unionActivityToChangeVisibility.IsVisible == true)
        {
            unionActivityToChangeVisibility.IsVisible = false;
            await _db.UpdateUnionActivity(unionActivityToChangeVisibility.Id, unionActivityToChangeVisibility);
        }
        else
        {
            unionActivityToChangeVisibility.IsVisible = true;
            await _db.UpdateUnionActivity(unionActivityToChangeVisibility.Id, unionActivityToChangeVisibility);
        }
    }

    void GoToListOfParticipants(int id)
    {
        NavigationManager.NavigateTo($"begivenheder/tilmeldinger/{id}");
    }

    private bool GetUnionActivityRegistrations(int id) {

        foreach (var registration in registrations) {
            if (registration.UnionActivityID == id) {
                return true;
            }
        }
        return false;
    }


    
}
